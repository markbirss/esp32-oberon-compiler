(*
// Copyright 2015-2016 Espressif Systems (Shanghai) PTE LTD
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
*)

MODULE [CDECL] ESP_Error;

  IMPORT s := ESP_Support;

  CONST 
    ESP_OK*      =  0;
    ESP_FAIL*    = -1;

    ESP_ERR_NO_MEM*            = 0101H;   (* Out of memory *)
    ESP_ERR_INVALID_ARG*       = 0102H;   (* Invalid argument *)
    ESP_ERR_INVALID_STATE*     = 0103H;   (* Invalid state *)
    ESP_ERR_INVALID_SIZE*      = 0104H;   (* Invalid size *)
    ESP_ERR_NOT_FOUND*         = 0105H;   (* Requested resource not found *)
    ESP_ERR_NOT_SUPPORTED*     = 0106H;   (* Operation or feature not supported *)
    ESP_ERR_TIMEOUT*           = 0107H;   (* Operation timed out *)
    ESP_ERR_INVALID_RESPONSE*  = 0108H;   (* Received response was invalid *)
    ESP_ERR_INVALID_CRC*       = 0109H;   (* CRC or checksum was invalid *)
    ESP_ERR_INVALID_VERSION*   = 010AH;   (* Version was invalid *)
    ESP_ERR_INVALID_MAC*       = 010BH;   (* MAC address was invalid *)
    
    ESP_ERR_WIFI_BASE*         = 03000H;  (* Starting number of WiFi error codes *)
    ESP_ERR_MESH_BASE*         = 04000H;  (* Starting number of MESH error codes *)
    ESP_ERR_FLASH_BASE*        = 06000H;  (* Starting number of flash error codes *)
    
  TYPE esp_err_t* = INTEGER;

  (**
   * @brief Returns string for esp_err_t error codes
   *
   * This function finds the error code in a pre-generated lookup-table and
   * returns its string representation.
   *
   * The function is generated by the Python script
   * tools/gen_esp_err_to_name.py which should be run each time an esp_err_t
   * error is modified, created or removed from the IDF project.
   *
   * @param code esp_err_t error code
   * @return string error message
   *)

  PROCEDURE esp_err_to_name* (code: esp_err_t): s.str_ptr_t;

  (**
   * @brief Returns string for esp_err_t and system error codes
   *
   * This function finds the error code in a pre-generated lookup-table of
   * esp_err_t errors and returns its string representation. If the error code
   * is not found then it is attempted to be found among system errors.
   *
   * The function is generated by the Python script
   * tools/gen_esp_err_to_name.py which should be run each time an esp_err_t
   * error is modified, created or removed from the IDF project.
   *
   * @param code esp_err_t error code
   * @param[out] buf buffer where the error message should be written
   * @param buflen Size of buffer buf. At most buflen bytes are written into the buf buffer (including the terminating null byte).
   * @return buf containing the string error message
   *)
  
  PROCEDURE esp_err_to_name_r* (code: esp_err_t; buf: s.str_t; buflen: s.size_t): s.str_ptr_t;

END ESP_Error.