    .title Interrupt Vector Definitions
    .sbttl Oberon ESP32 Compiler Version 0.1.0


/* Xtensa Instruction Set Architecture (ISA) Reference Manual, page 192 */

.section .WindowVectors.text, "ax"

/* ---------------------------- */
/* ----- _WindowOverflow4 ----- */
/* ---------------------------- */

window_handler WindowOverflow4 0x0

    s32e    a0, a5, -16
    s32e    a1, a5, -12
    s32e    a2, a5,  -8
    s32e    a3, a5,  -4
    rfwo               

/* ----------------------------- */
/* ----- _WindowUnderflow4 ----- */
/* ----------------------------- */

window_handler WindowUnderflow4 0x40

    l32e    a0, a5, -16
    l32e    a1, a5, -12
    l32e    a2, a5,  -8
    l32e    a3, a5,  -4
    rfwu

/*
--------------------------------------------------------------------------------
Handle alloca exception generated by interruptee executing 'movsp'.
This uses space between the window vectors, so is essentially "free".
All interruptee's regs are intact except a0 which is saved in EXCSAVE_1,
and PS.EXCM has been set by the exception hardware (can't be interrupted).
The fact the alloca exception was taken means the registers associated with
the base-save area have been spilled and will be restored by the underflow
handler, so those 4 registers are available for scratch.
The code is optimized to avoid unaligned branches and minimize cache misses.
--------------------------------------------------------------------------------
*/

    function xt_alloca_exc

    rsr     a0, WINDOWBASE  /* grab WINDOWBASE before rotw changes it */
    rotw    -1              /* WINDOWBASE goes to a4, new a0-a3 are scratch */
    rsr     a2, PS
    extui   a3, a2, XCHAL_PS_OWB_SHIFT, XCHAL_PS_OWB_BITS
    xor     a3, a3, a4      /* bits changed from old to current windowbase */
    rsr     a4, EXCSAVE_1   /* restore original a0 (now in a4) */
    slli    a3, a3, XCHAL_PS_OWB_SHIFT
    xor     a2, a2, a3      /* flip changed bits in old window base */
    wsr     a2, PS          /* update PS.OWB to new window base */
    rsync

    _bbci.l a4, 31, _WindowUnderflow4
    rotw    -1              /* original a0 goes to a8 */
    _bbci.l a8, 30, _WindowUnderflow8
    rotw    -1
    j               _WindowUnderflow12

/* ----------------------------- */
/* ----- _WindowOverflow8 ----- */
/* ----------------------------- */

window_handler WindowOverflow8 0x80

    s32e    a0, a9, -16
    l32e    a0, a1, -12
                       
    s32e    a1, a9, -12
    s32e    a2, a9,  -8
    s32e    a3, a9,  -4
    s32e    a4, a0, -32
    s32e    a5, a0, -28
    s32e    a6, a0, -24
    s32e    a7, a0, -20
    rfwo               

/* ----------------------------- */
/* ----- _WindowUnderflow8 ----- */
/* ----------------------------- */

window_handler WindowUnderflow8 0xC0

    l32e    a0, a9, -16
    l32e    a1, a9, -12
    l32e    a2, a9,  -8
    l32e    a7, a1, -12
        
    l32e    a3, a9,  -4
    l32e    a4, a7, -32
    l32e    a5, a7, -28
    l32e    a6, a7, -24
    l32e    a7, a7, -20
    rfwu

/* ----------------------------- */
/* ----- _WindowOverflow12 ----- */
/* ----------------------------- */

window_handler WindowOverflow12 0x100

    s32e    a0,  a13, -16
    l32e    a0,  a1,  -12
                         
    s32e    a1,  a13, -12
    s32e    a2,  a13,  -8
    s32e    a3,  a13,  -4
    s32e    a4,  a0,  -48
    s32e    a5,  a0,  -44
    s32e    a6,  a0,  -40
    s32e    a7,  a0,  -36
    s32e    a8,  a0,  -32
    s32e    a9,  a0,  -28
    s32e    a10, a0,  -24
    s32e    a11, a0,  -20
    rfwo                 

/* ------------------------------ */
/* ----- _WindowUnderflow12 ----- */
/* ------------------------------ */

window_handler WindowUnderflow12 0x140

    l32e    a0,  a13, -16
    l32e    a1,  a13, -12
    l32e    a2,  a13,  -8
    l32e    a11, a1,  -12

    l32e    a3,  a13,  -4
    l32e    a4,  a11, -48
    l32e    a5,  a11, -44
    l32e    a6,  a11, -40
    l32e    a7,  a11, -36
    l32e    a8,  a11, -32
    l32e    a9,  a11, -28
    l32e    a10, a11, -24
    l32e    a11, a11, -20
    rfwu

/* -------------------------------- */
/* ---- User Exception Handler ---- */
/* -------------------------------- */

    .section .iram1, "ax"

# Trampolines in support of handler's branch instructions

redirector _xt_to_alloca_exc  _xt_alloca_exc
redirector _xt_to_syscall_exc _xt_syscall_exc

interrupt_handler xt_user_exc

    /* Dispatch in regard of the interrupt cause */
    rsr     a0, EXCCAUSE
    beqi    a0, CAUSE_ALLOCA,  _xt_to_alloca_exc
    beqi    a0, CAUSE_SYSCALL, _xt_to_syscall_exc

# end_interrupt_handler xt_user_exc 1
_xt_user_exit:
    rsr     a0, EXCSAVE_1
    rfe

interrupt_handler xt_kernel 1

    rsr     a0, EXCSAVE_1
    rfe

interrupt_handler xt_double_exc 1

    rsr     a0, EXCSAVE_1
    rfe

/* --------------------------*/
/* ---- Vectors ------------ */
/* --------------------------*/

interrupt_vector UserExceptionVector   xt_user_exc 1

interrupt_vector Level2InterruptVector xt_highint2 2

interrupt_vector Level3InterruptVector xt_highint3 3

interrupt_vector Level4InterruptVector xt_highint4 4

interrupt_vector Level5InterruptVector xt_highint5 5

interrupt_vector Level6InterruptVector xt_highint6 6

interrupt_vector NMIExceptionVector    xt_nmi 7

interrupt_vector KernelExceptionVector xt_kernel 1

interrupt_vector DoubleExceptionVector xt_double_exc 1

/* -------------------------- */
/* ---- Default Handlers ---- */
/* -------------------------- */

interrupt_handler     xt_highint2
end_interrupt_handler xt_highint2 2

interrupt_handler     xt_highint3
end_interrupt_handler xt_highint3 3

interrupt_handler     xt_highint4
end_interrupt_handler xt_highint4 4

interrupt_handler     xt_highint5
end_interrupt_handler xt_highint5 5

interrupt_handler     xt_highint6
end_interrupt_handler xt_highint6 6

interrupt_handler     xt_nmi
end_interrupt_handler xt_nmi 7
